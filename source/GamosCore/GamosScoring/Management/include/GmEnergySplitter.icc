//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
#include "GamosCore/GamosUtils/include/GmGenUtils.hh"
#include "G4RegularNavigationHelper.hh"
#include "G4UIcommand.hh"
#include "G4PhantomParameterisation.hh"

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetLastVoxelID( G4int& voxelID)
{	
  voxelID = (*(G4RegularNavigationHelper::Instance()->theStepLengths.begin())).first;
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetFirstVoxelID( G4int& voxelID)
{
  voxelID =  (*(G4RegularNavigationHelper::Instance()->theStepLengths.rbegin())).first;
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetVoxelID( G4int stepNo, G4int& voxelID )
{
  if( stepNo < 0 || stepNo >= G4int(G4RegularNavigationHelper::Instance()->theStepLengths.size()) ) {
  G4Exception("GmEnergySplitter::GetVoxelID",
	      "Invalid stepNo, smaller than 0 or bigger or equal to number of voxels traversed",
	      FatalErrorInArgument,
	      G4String("stepNo = " + GmGenUtils::itoa(stepNo) + ", number of voxels = " + GmGenUtils::itoa(G4int(G4RegularNavigationHelper::Instance()->theStepLengths.size())) ).c_str());
  }
  std::vector< std::pair<G4int,G4double> >::const_iterator ite = G4RegularNavigationHelper::Instance()->theStepLengths.begin();
  advance( ite, stepNo );
  voxelID = (*ite).first;

}


//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetStepLength( G4int stepNo, G4double& stepLength )
{
  std::vector< std::pair<G4int,G4double> >::const_iterator ite = G4RegularNavigationHelper::Instance()->theStepLengths.begin();
  advance( ite, stepNo );
  stepLength = (*ite).second;
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetVoxelIDAndLength( G4int stepNo, G4int& voxelID, G4double& stepLength )
{
  GetVoxelID( stepNo, voxelID );
  GetStepLength( stepNo, stepLength);
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetLengthAndEnergyDeposited( G4int stepNo, G4int& voxelID, G4double& stepLength, G4double &energyDepo)
{
  GetVoxelIDAndLength( stepNo, voxelID, stepLength );

  energyDepo = theEnergies[stepNo];
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::GetLengthAndInitialEnergy( G4double &preStepEnergy, G4int stepNo, G4int& voxelID, G4double& stepLength, G4double &initialEnergy)
{
  GetVoxelIDAndLength( stepNo, voxelID, stepLength );

  initialEnergy = preStepEnergy;
  for( G4int ii = 0; ii < stepNo; ii++ ){
    initialEnergy -= theEnergies[stepNo];
  }
}

//-----------------------------------------------------------------------
inline void GmEnergySplitter::SetNIterations( G4int niter )
{
  theNIterations = niter;
}

//-----------------------------------------------------------------------
inline G4Material* GmEnergySplitter::GetVoxelMaterial( G4int stepNo )
{
  if( !thePhantomParam ) GetPhantomParam(TRUE);
  G4int voxelID;
  GetVoxelID( stepNo, voxelID );
  return thePhantomParam->GetMaterial( voxelID );
}

